#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

struct cmp {
     bool operator()(vector<int> a, vector<int> b) {
        return a.at(1) > b.at(1);
    }
};

int solution(vector<vector<int>> jobs) {
    int current_time = 0;
    int answer = 0;
    
    int size = jobs.size();
    int i =0;
    
    sort(jobs.begin(), jobs.end());
    priority_queue<vector<int>, vector<vector<int>>, cmp> q;
    
    while(i < size || !q.empty()){
       
        //현재 처리가능한 작업이 있다면 큐에 대기.
        if(i < size && current_time >= jobs[i][0]){
            q.push(jobs[i++]);
            //다음에 또 있는지 확인
            continue;
        }
        //큐에 값이 있다면
        if(!q.empty()){
            current_time += q.top()[1];
            answer += current_time - q.top()[0];
            q.pop();
        }else{
            //큐에 값이 없다면
            current_time = jobs[i][0];
        }
       // printf("%d, %d\n", q.top().first, q.top().second);
      
    }
 
    
    return answer/size;
  
}